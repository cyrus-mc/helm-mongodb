apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name | quote }}
    version: {{ .Chart.Version | quote }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    cluster: {{ template "fullname" . }}
  name: {{ template "shortname" . }}
  namespace: {{ .Values.Namespace | default "default" }}
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
        cluster: {{ template "fullname" . }}
      annotations:
      {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8}}
      {{- end }}
        pod.alpha.kubernetes.io/init-containers: '[
            {
                "name": "install",
                "image": "{{ .Values.installImage.name }}:{{ .Values.installImage.tag }}",
                "args": ["--work-dir=/work-dir"],
                "imagePullPolicy": "{{ .Values.installImage.pullPolicy }}",
                "volumeMounts": [
                    {
                        "name": "workdir",
                        "mountPath": "/work-dir"
                    },
                    {
                        "name": "config",
                        "mountPath": "/config"
                    }
                ]
            },
            {
                "name": "bootstrap",
                "image": "{{ .Values.image.name }}:{{ .Values.image.tag }}",
                "command": ["/work-dir/peer-finder"],
                "args": ["-on-start=/work-dir/on-start.sh", "-service={{ template "fullname" . }}"],
                "imagePullPolicy": "{{ .Values.image.pullPolicy }}",
                "env": [
                    {
                        "name": "POD_NAMESPACE",
                        "valueFrom": {
                            "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                            }
                        }
                    },
                    {
                        "name": "REPLICA_SET",
                        "value": "{{ .Values.replicaSet }}"
                    }
                    {{- if .Values.auth.enabled }},
                    {
                        "name": "AUTH",
                        "value": "true"
                    },
                    {
                        "name": "ADMIN_USER",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "{{ template "adminSecret" . }}",
                                "key": "user"
                            }
                        }
                    },
                    {
                        "name": "ADMIN_PASSWORD",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "{{ template "adminSecret" . }}",
                                "key": "password"
                            }
                        }
                    }
                    {{- end }}
                ],
                "volumeMounts": [
                    {
                        "name": "workdir",
                        "mountPath": "/work-dir"
                    },
                    {
                        "name": "config",
                        "mountPath": "/config"
                    },
                    {
                        "name": "datadir",
                        "mountPath": "/data/db"
                    }
                    {{- if .Values.auth.enabled }},
                    {
                        "name": "keydir",
                        "mountPath": "/keydir",
                        "readOnly": true
                    }
                    {{- end }}
                ]
            }
        ]'
{{- if .Values.Monitoring.Enabled }}
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '{{ .Values.Monitoring.Port.Container }}'
{{- end }}
    spec:
      {{- if .Values.Scheduling.Enabled }}
      affinity:
{{ toYaml .Values.Scheduling.Affinity | indent 8 }}
      {{- end }}
      containers:
      - name: mongodb
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - name: peer
            containerPort: {{ .Values.port }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        command:
          - mongod
          - --config=/config/mongod.conf
        {{- if .Values.auth.enabled }}
        env:
        - name: AUTH
          value: true
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "adminSecret" . }}
              key: user
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "adminSecret" . }}
              key: password
        {{- end }}
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: datadir
          mountPath: /data/db
        - name: config
          mountPath: /config
        - name: workdir
          mountPath: /work-dir
        {{- if .Values.auth.enabled }}
        - name: keydir
          mountPath: /keydir
          readOnly: true
        {{- end }}
{{- if .Values.Monitoring.Enabled }}
      - name: exporter
        image: {{ .Values.Monitoring.Image.Name }}:{{ .Values.Monitoring.Image.Tag }}
        ports:
        - containerPort: {{ .Values.Monitoring.Port.Container }}
          name: exporter
          protocol: TCP
{{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "fullname" . }}
        {{- if .Values.auth.enabled }}
        - name: keydir
          secret:
            defaultMode: 0400
            secretName: {{ template "keySecret" . }}
        {{- end }}
        - name: workdir
          emptyDir: {}
{{- if .Values.Persistence.Enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- if .Values.Persistence.StorageClass | quote }}
          volume.beta.kubernetes.io/storage-class: {{ .Values.Persistence.StorageClass | quote }}
        {{- else }}
          volume.alpha.kubernetes.io/storage-class: default
        {{- end }}
        {{- range $key, $value := .Values.Persistence.Annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        - {{ .Values.Persistence.AccessMode }}
        resources:
          requests:
            storage: {{ .Values.Persistence.Size | quote }}
{{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}
